<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>r on LEARNING WITH SCKINTA</title>
    <link>/categories/r/</link>
    <description>Recent content in r on LEARNING WITH SCKINTA</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 30 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ML pipeline with tidymodels vs. caret</title>
      <link>/post/2020-04-30_caret_vs_tidymodels/</link>
      <pubDate>Thu, 30 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020-04-30_caret_vs_tidymodels/</guid>
      <description>As a DS beginner, I first came across ML in R by studying the book Hands-On Machine Learning with R. The book mainly focus package caret with general introductions about packages like recipe and h2o. Most examples use the workflow in which feature engineering is performed by recipe and modeling/learning part is done caret.
It was a great pleasure to take tidymodels workshop hosted by Dr. Alison Hill last week.</description>
    </item>
    
    <item>
      <title>External persistent data I/O using ShinyApp</title>
      <link>/post/2020-03-30_shinyapp_tips/</link>
      <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020-03-30_shinyapp_tips/</guid>
      <description>Shiny App is a fantastic application in Rstudio and makes the data processing more accessible (and fun!). Most easy shiny apps are made to represent data based on a given user input which is read into memory or temperal file by R and spit out tables or figures in the same process. However, to make an app that need to keep the user input data for persistent storage and present in the future process require some external data I/O.</description>
    </item>
    
    <item>
      <title>PAWS return project EDA</title>
      <link>/post/2020-1-29-paws-return-eda/</link>
      <pubDate>Wed, 29 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020-1-29-paws-return-eda/</guid>
      <description>As my new year resolution, I decide to participate in more projects and horn programming skills by doing the work. One opportunity poped up at beginning this year. I am thrilled to participate and lead Rladies Philly’s new collaboration with Philadelphia Animal Welfare Society (PAWS) to analyze their animal data, aiming to help PAWS improving adoption process and clinic efficiency. This blog is part of explortory data analysis (EDA) I have done so far.</description>
    </item>
    
    <item>
      <title>From R to Python: Data Wrangling (part1)</title>
      <link>/post/2019-10-22_data_wrangling/</link>
      <pubDate>Tue, 22 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019-10-22_data_wrangling/</guid>
      <description>Data wrangling usually stands as the first step for any data scientist. I started to learn data science by reading the book “R for Data Science”. The book is mainly an intro to the tidyverse, which is a collection of R packages designed for data science. It has its own grammar/syntax that can help users efficiently deal with data wrangling, visualization, string/date management, etc. As a regular tidyverse user now, I benefit a lot from the transition from base R to higher level R language in sophisticated packages.</description>
    </item>
    
    <item>
      <title>Network visualization (part3)</title>
      <link>/post/network_analysis_part3/</link>
      <pubDate>Wed, 04 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/network_analysis_part3/</guid>
      <description>In the previous two posts (part1, part2), we discussed about IGRAPH object and how to manipulate, measure and cluster it. In this part3 of network analysis series, I will focus on the network work visualization.
Network visualization are supported by two aspects — the aestheic part of network elements (aka, vertices and edges) and layout of network. There are multiple packages available for these aspects. I will focus on the basic igraph plot (more like base R plot) and the application of ggraph (comparable to ggplot2)</description>
    </item>
    
    <item>
      <title>Network analysis part2</title>
      <link>/post/network_analysis_part2-2/</link>
      <pubDate>Sat, 24 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/network_analysis_part2-2/</guid>
      <description>In last post, we cover the basic components of IGRAPH objects and how to manipulate IGRAPH. You may notice that most of those manipulation do not really require a IGRAPH object to play with. However, in this post, you will realize the advantage of using IGRAPH in network analysis and how operation on IGRAPH object is much easier than using data.frame when doing network analysis.
In this session, we are going to use a new undirected graph (gr) generated by sample_gnp().</description>
    </item>
    
    <item>
      <title>Network Analysis in R (part1)</title>
      <link>/post/network_analysis/</link>
      <pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/network_analysis/</guid>
      <description>Network analysis is to study the complexity of the inter-relationships between actors of all sorts and provides an architectural view of individual actor connections. It has been applied to many fields, like social network and gene network, and useful for any systematic studies on individual relationship. wiki
This post plus following two posts (part2, part3) aim to introduce the termilogy that are frequently used in network and public available R tools that are useful for network analysis and visualization.</description>
    </item>
    
  </channel>
</rss>